// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "parameters": [
                    {
                        "description": "email and password input",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.StudentAuth"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalServerError"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ping"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Header for requestID",
                        "name": "X-Request-ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Header for body type",
                        "name": "Content-Type",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PingResponse"
                        }
                    }
                }
            }
        },
        "/ping/:id/:param2": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ping"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "path params for id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "path params for param2",
                        "name": "param2",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "query for q",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.PingWithParam"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.PingResponse": {
            "type": "object",
            "properties": {
                "contentType": {
                    "type": "string",
                    "example": "application/json"
                },
                "message": {
                    "type": "string",
                    "example": "pong"
                },
                "requestId": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "handlers.PingWithParam": {
            "type": "object",
            "properties": {
                "param": {
                    "type": "integer",
                    "example": 1
                },
                "param2": {
                    "type": "string",
                    "example": "action"
                },
                "q": {
                    "type": "string",
                    "example": "habib"
                }
            }
        },
        "models.AuthData": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "jwt token"
                }
            }
        },
        "models.AuthResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.AuthData"
                },
                "status": {
                    "type": "integer",
                    "example": 200
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "models.BadRequestError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "error message"
                },
                "status": {
                    "type": "integer",
                    "example": 400
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "models.InternalServerError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "error message"
                },
                "status": {
                    "type": "integer",
                    "example": 500
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "models.StudentAuth": {
            "type": "object",
            "required": [
                "nama_siswa",
                "password"
            ],
            "properties": {
                "nama_siswa": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 4
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "KODA 3 GIN",
	Description:      "RESTful API created using gin for Koda Batch 3",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
